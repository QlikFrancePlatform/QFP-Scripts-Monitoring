///$tab Main
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 €;-# ##0,00 €';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='fr-FR';
SET CreateSearchIndexOnReload=1;
SET MonthNames='janv.;févr.;mars;avr.;mai;juin;juil.;août;sept.;oct.;nov.;déc.';
SET LongMonthNames='janvier;février;mars;avril;mai;juin;juillet;août;septembre;octobre;novembre;décembre';
SET DayNames='lun.;mar.;mer.;jeu.;ven.;sam.;dim.';
SET LongDayNames='lundi;mardi;mercredi;jeudi;vendredi;samedi;dimanche';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

///$tab Analyzer Apps
[AppMemory]:
LOAD
    AppRAM_Bytes,
    AppRAM_GB,
    AppRAM_MB,
    AppID							As id
FROM [lib://Monitoring:DataFiles/app_analyzer_AppRAM_3.0.1.qvd]
(qvd);

[AppCPU]:
LOAD
    "App Reload CPU Time (ms)",
    AppRAMPeakReload_Byte,
    AppRAMPeakReload_GB,
    AppRAMPeakReload_MB,
    AppID							As id
FROM [lib://Monitoring:DataFiles/app_analyzer_AppReloadCPUMetadata_3.0.1.qvd]
(qvd);


///$tab Reload Apps
[Reloads]:
LOAD
    ReloadID,
    AppID							As id,
    ReloadUserID,
    ReloadType,
    ReloadStatus,
    ReloadDuration,
    ReloadStartDate,
    ReloadCreationTime,
    ReloadStartTime,
    ReloadStartHour,
    ReloadStartMinute,
    ReloadEndTime,
    ReloadEngineTime,
    _AuditReloadKey,
    ReloadPeakReloadRAM_GB,
    ReloadPeakReloadRAM_MB,
    BaseRAMFootprint
FROM [lib://Monitoring:DataFiles/reload_analyzer_Reloads_3.1.7.qvd]
(qvd);

[AuditReloadErrors]:
LOAD
    _AuditReloadKey,
    ReloadErrorDescription,
    ReloadError,
    ReloadLine,
    ReloadLineNumber
FROM [lib://Monitoring:DataFiles/reload_analyzer_AuditReloadErrors_3.1.7.qvd]
(qvd);


///$tab List file on AWS S3
LIB CONNECT TO 'Monitoring:Amazon_S3_Metadata_V2_Monitoring_File';

LOAD Key as [List.Key], 
	LastModified as [List.LastModified], 
	ETag as [List.ETag], 
	Size as [List.Size], 
	OwnerId as [List.OwnerId], 
	StorageClass as [List.StorageClass];

SELECT Key,
	LastModified,
	ETag,
	Size,
	OwnerId,
	StorageClass
FROM List
WITH PROPERTIES (
dir='scripts-cloud-de',
maxResults=''
);


///$tab List apps on Qlik Sense Monitoring Space
LIB CONNECT TO 'Monitoring:REST for List app Monitoring space';

RestConnectorMasterTable:
SQL SELECT 
	"__KEY_root",
	(SELECT 
		"name" AS "name_u0",
		"spaceId" AS "spaceId_u0",
		"thumbnailId",
		"resourceCustomAttributes",
		"resourceUpdatedAt",
		"resourceType",
		"resourceId",
		"resourceCreatedAt",
		"id" AS "id_u0",
		"createdAt",
		"updatedAt",
		"creatorId",
		"updaterId",
		"tenantId",
		"isFavorited" AS "isFavorited_u0",
		"ownerId" AS "ownerId_u0",
		"resourceReloadEndTime",
		"resourceReloadStatus",
		"description" AS "description_u0",
		"__KEY_data",
		"__FK_data",
		(SELECT 
			"_resourcetype",
			"createdDate",
			"description",
			"dynamicColor",
			"hasSectionAccess",
			"id",
			"isDirectQueryMode",
			"lastReloadTime",
			"modifiedDate",
			"name",
			"originAppId",
			"owner",
			"ownerId",
			"publishTime",
			"published",
			"spaceId",
			"thumbnail",
			"usage",
			"__FK_resourceAttributes"
		FROM "resourceAttributes" FK "__FK_resourceAttributes"),
		(SELECT 
			"__KEY_links",
			"__FK_links",
			(SELECT 
				"href",
				"__FK_self"
			FROM "self" FK "__FK_self"),
			(SELECT 
				"href" AS "href_u0",
				"__FK_collections"
			FROM "collections" FK "__FK_collections"),
			(SELECT 
				"href" AS "href_u1",
				"__FK_open"
			FROM "open" FK "__FK_open"),
			(SELECT 
				"href" AS "href_u2",
				"__FK_thumbnail"
			FROM "thumbnail" FK "__FK_thumbnail")
		FROM "links" PK "__KEY_links" FK "__FK_links"),
		(SELECT 
			"@Value",
			"__FK_actions"
		FROM "actions" FK "__FK_actions" ArrayValueAlias "@Value"),
		(SELECT 
			"@Value" AS "@Value_u0",
			"__FK_collectionIds"
		FROM "collectionIds" FK "__FK_collectionIds" ArrayValueAlias "@Value_u0"),
		(SELECT 
			"isFavorited",
			"__KEY_meta",
			"__FK_meta",
			(SELECT 
				"@Value" AS "@Value_u1",
				"__FK_actions_u0"
			FROM "actions" FK "__FK_actions_u0" ArrayValueAlias "@Value_u1"),
			(SELECT 
				"@Value" AS "@Value_u2",
				"__FK_tags"
			FROM "tags" FK "__FK_tags" ArrayValueAlias "@Value_u2"),
			(SELECT 
				"@Value" AS "@Value_u3",
				"__FK_collections_u0"
			FROM "collections" FK "__FK_collections_u0" ArrayValueAlias "@Value_u3")
		FROM "meta" PK "__KEY_meta" FK "__FK_meta"),
		(SELECT 
			"appFile",
			"appMemory",
			"__FK_resourceSize"
		FROM "resourceSize" FK "__FK_resourceSize"),
		(SELECT 
			"total",
			"trend",
			"unique",
			"__FK_itemViews"
		FROM "itemViews" FK "__FK_itemViews")
	FROM "data" PK "__KEY_data" FK "__FK_data"),
	(SELECT 
		"__KEY_links_u0",
		"__FK_links_u0",
		(SELECT 
			"href" AS "href_u3",
			"__FK_self_u0"
		FROM "self" FK "__FK_self_u0"),
		(SELECT 
			"href" AS "href_u4",
			"__FK_next"
		FROM "next" FK "__FK_next")
	FROM "links" PK "__KEY_links_u0" FK "__FK_links_u0")
FROM JSON (wrap on) "root" PK "__KEY_root";

[resourceAttributes]:
LOAD	[_resourcetype],
	[createdDate],
	[description],
	[dynamicColor],
	[hasSectionAccess],
	[id],
	[isDirectQueryMode],
	[lastReloadTime],
	[modifiedDate],
	[name],
	[originAppId],
	[owner],
	[ownerId],
	[publishTime],
	[published],
	[spaceId],
	[thumbnail],
	[usage],
	[__FK_resourceAttributes] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_resourceAttributes]);


[self]:
LOAD	[href],
	[__FK_self] AS [__KEY_links]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_self]);


[collections]:
LOAD	[href_u0] AS [href_u0],
	[__FK_collections] AS [__KEY_links]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_collections]);


[open]:
LOAD	[href_u1] AS [href_u1],
	[__FK_open] AS [__KEY_links]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_open]);


[thumbnail]:
LOAD	[href_u2] AS [href_u2],
	[__FK_thumbnail] AS [__KEY_links]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_thumbnail]);


[links]:
LOAD	[__KEY_links],
	[__FK_links] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_links]);


[actions]:
LOAD	[@Value],
	[__FK_actions] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_actions]);


[collectionIds]:
LOAD	[@Value_u0] AS [@Value_u0],
	[__FK_collectionIds] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_collectionIds]);


[actions_u0]:
LOAD	[@Value_u1] AS [@Value_u1],
	[__FK_actions_u0] AS [__KEY_meta]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_actions_u0]);


[tags]:
LOAD	[@Value_u2] AS [@Value_u2],
	[__FK_tags] AS [__KEY_meta]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tags]);


[collections_u0]:
LOAD	[@Value_u3] AS [@Value_u3],
	[__FK_collections_u0] AS [__KEY_meta]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_collections_u0]);


[meta]:
LOAD	[isFavorited],
	[__KEY_meta],
	[__FK_meta] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_meta]);


[resourceSize]:
LOAD	[appFile],
	[appMemory],
	[__FK_resourceSize] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_resourceSize]);


[itemViews]:
LOAD	[total],
	[trend],
	[unique],
	[__FK_itemViews] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_itemViews]);


[data]:
LOAD	[name_u0] AS [name_u0],
	[spaceId_u0] AS [spaceId_u0],
	[thumbnailId],
	[resourceCustomAttributes],
	[resourceUpdatedAt],
	[resourceType],
	[resourceId],
	[resourceCreatedAt],
	[id_u0] AS [id_u0],
	[createdAt],
	[updatedAt],
	[creatorId],
	[updaterId],
	[tenantId],
	[isFavorited_u0] AS [isFavorited_u0],
	[ownerId_u0] AS [ownerId_u0],
	[resourceReloadEndTime],
	[resourceReloadStatus],
	[description_u0] AS [description_u0],
	[__KEY_data],
	[__FK_data] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_data]);


[self_u0]:
LOAD	[href_u3] AS [href_u3],
	[__FK_self_u0] AS [__KEY_links_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_self_u0]);


[next]:
LOAD	[href_u4] AS [href_u4],
	[__FK_next] AS [__KEY_links_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_next]);


[links_u0]:
LOAD	[__KEY_links_u0],
	[__FK_links_u0] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_links_u0]);


[root]:
LOAD	[__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);


DROP TABLE RestConnectorMasterTable;



///$tab Github Info
LIB CONNECT TO 'Monitoring:GitHub - magikcypress';

[GitHubTmp]:
LOAD Full_Name as [OrganisationRepositories.Full_Name], 
	Owner as [OrganisationRepositories.Owner], 
	Description as [OrganisationRepositories.Description], 
	Is_Private as [OrganisationRepositories.Is_Private], 
	Created as [OrganisationRepositories.Created], 
	Updated as [OrganisationRepositories.Updated], 
	Pushed as [OrganisationRepositories.Pushed], 
	Forks_Count as [OrganisationRepositories.Forks_Count], 
	Default_Branch as [OrganisationRepositories.Default_Branch], 
	Size as [OrganisationRepositories.Size], 
	Language as [OrganisationRepositories.Language], 
	Open_Issues_Count as [OrganisationRepositories.Open_Issues_Count], 
	Admin as [OrganisationRepositories.Admin], 
	Push_Permission as [OrganisationRepositories.Push_Permission], 
	Pull_Permission as [OrganisationRepositories.Pull_Permission], 
	Archived as [OrganisationRepositories.Archived], 
	License_Name as [OrganisationRepositories.License_Name], 
	Disabled as [OrganisationRepositories.Disabled], 
	Stargazers_Count as [OrganisationRepositories.Stargazers_Count], 
	Watchers_Count as [OrganisationRepositories.Watchers_Count];

SELECT Full_Name,
	Owner,
	Description,
	Is_Private,
	Created,
	Updated,
	Pushed,
	Forks_Count,
	Default_Branch,
	Size,
	Language,
	Open_Issues_Count,
	Admin,
	Push_Permission,
	Pull_Permission,
	Archived,
	License_Name,
	Disabled,
	Stargazers_Count,
	Watchers_Count
FROM OrganisationRepositories
WITH PROPERTIES (
organizationName='QlikFrancePlatform'
);

[GitHub_Users]:
LOAD DateTime as [Commits.DateTime], 
	SHA as [Commits.SHA], 
	Author as [Commits.Author], 
	Author_Username as [Commits.Author_Username], 
	Author_Avatar as [Commits.Author_Avatar], 
	Committer as [Commits.Committer], 
	Committer_Username as [Commits.Committer_Username], 
	Committer_Avatar as [Commits.Committer_Avatar], 
	Message as [Commits.Message], 
	Parent_SHAs as [Commits.Parent_SHAs];

SELECT DateTime,
	SHA,
	Author,
	Author_Username,
	Author_Avatar,
	Committer,
	Committer_Username,
	Committer_Avatar,
	Message,
	Parent_SHAs
FROM Commits
WITH PROPERTIES (
repoName='QlikFrancePlatform/QFP-Backup-Monitoring',
branchSha='main',
sinceDate=''
);

[GitHub]:
LOAD
	[OrganisationRepositories.Full_Name]			AS [Orga.Full_Name], 
	[OrganisationRepositories.Owner]				AS [Orga.Owner], 
	[OrganisationRepositories.Description]			AS [Orga.Description], 
	[OrganisationRepositories.Is_Private]			AS [Orga.Is_Private], 
	[OrganisationRepositories.Created]				AS [Orga.Created], 
	[OrganisationRepositories.Updated]				AS [Orga.Updated], 
	[OrganisationRepositories.Pushed]				AS [Orga.Pushed], 
	[OrganisationRepositories.Forks_Count]			AS [Orga.Forks_Count], 
	[OrganisationRepositories.Default_Branch]		AS [Orga.Default_Branch], 
	[OrganisationRepositories.Size]					AS [Orga.Size], 
	[OrganisationRepositories.Language]				AS [Orga.Language], 
	[OrganisationRepositories.Open_Issues_Count]	AS [Orga.Open_Issues_Count], 
	[OrganisationRepositories.Admin]				AS [Orga.Admin], 
	[OrganisationRepositories.Push_Permission]		AS [Orga.Push_Permission], 
	[OrganisationRepositories.Pull_Permission]		AS [Orga.Pull_Permission], 
	[OrganisationRepositories.Archived]				AS [Orga.Archived], 
	[OrganisationRepositories.License_Name]			AS [Orga.License_Name], 
	[OrganisationRepositories.Disabled]				AS [Orga.Disabled], 
	[OrganisationRepositories.Stargazers_Count]		AS [Orga.Stargazers_Count], 
	[OrganisationRepositories.Watchers_Count]		AS [Orga.Watchers_Count]

RESIDENT [GitHubTmp];

Drop table [GitHubTmp];


///$tab Datafile local
Set vConcatenate = ;

FileList:
LOAD
	'' AS SourceFile
AUTOGENERATE 0;

sub ScanFolder(Root)
          for each FileExtension in 'md'
            let vThing = Root & '*.' & FileExtension;
            for each File in filelist(vThing)
                        FileList:
                        LOAD '$(File)' as SourceFile
                        AUTOGENERATE 1;
                        Set vConcatenate = Concatenate;
            next File
          next FileExtension
          for each SubDirectory in dirlist( Root & '\*' )
                    call ScanFolder(SubDirectory)
          next SubDirectory
end sub

Call ScanFolder('lib://Monitoring:DataFiles/') ;
///$tab Distribution List
Replace LOAD
    "Name" AS [DL_DISTRIBUTION_RECIPIENT_NAME],
    "Email" AS [DL_DISTRIBUTION_EMAIL],
    SubField([Filters],',') AS [DL_DISTRIBUTION_FILTERS],
    SubField([Groups],',') AS [DL_DISTRIBUTION_GROUP_NAMES]
FROM "lib://:DataFiles/SampleFile(1).xlsx"
(ooxml, embedded labels, table is DL_DISTRIBUTION_SVC_USERS_QCS);

TempGroups:
  REPLACE LOAD
      *
    FROM "lib://:DataFiles/SampleFile(1).xlsx"
    (ooxml, embedded labels, table is DL_DISTRIBUTION_SVC_GROUPS_QCS);

let vEnabledFieldNo = FieldNumber('Enabled', 'TempGroups');

if (vEnabledFieldNo > 0) then
    DL_DISTRIBUTION_SVC_GROUPS_QCS:
    REPLACE LOAD
        "Name" AS [DL_DISTRIBUTION_GROUP_NAMES],
        "Description" AS [DL_DISTRIBUTION_GROUP_DESCRIPTION],
        "Enabled" AS [DL_DISTRIBUTION_GROUP_ENABLED]
    Resident TempGroups;
else

    DL_DISTRIBUTION_SVC_GROUPS_QCS:
    REPLACE LOAD
        "Name" AS [DL_DISTRIBUTION_GROUP_NAMES],
        "Description" AS [DL_DISTRIBUTION_GROUP_DESCRIPTION],
        1 AS [DL_DISTRIBUTION_GROUP_ENABLED]
    Resident TempGroups;
end if

Drop Table TempGroups;

tag field DL_DISTRIBUTION_RECIPIENT_NAME with 'DL_DISTRIBUTION_SVC__recipientName';
tag field DL_DISTRIBUTION_EMAIL with 'DL_DISTRIBUTION_SVC__recipientEmail';
tag field DL_DISTRIBUTION_FILTERS with 'DL_DISTRIBUTION_SVC__recipientFilters';
tag field DL_DISTRIBUTION_GROUP_NAMES with 'DL_DISTRIBUTION_SVC__groupsName';
tag field DL_DISTRIBUTION_GROUP_DESCRIPTION with 'DL_DISTRIBUTION_SVC__groupDescription';
tag field DL_DISTRIBUTION_GROUP_ENABLED with 'DL_DISTRIBUTION_SVC__groupEnabled';
